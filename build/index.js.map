{"version":3,"sources":["../src/index.js"],"names":["ensurePath","path","dir","make","err","test","message","indexOf","res","makeDir","parentDir","res2","mkdir"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;AAMe,eAAeA,UAAf,CAA0BC,IAA1B,EAAgC;AAC7C,QAAMC,MAAM,mBAAQD,IAAR,CAAZ;;AACA,MAAI;AACF,UAAME,KAAKD,GAAL,CAAN;AACA,WAAOD,IAAP;AACD,GAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,QAAI,SAASC,IAAT,CAAcD,IAAIE,OAAlB,KAA8BF,IAAIE,OAAJ,CAAYC,OAAZ,CAAoBL,GAApB,KAA4B,CAAC,CAA/D,EAAkE;AAChE,aAAOD,IAAP;AACD;;AACD,UAAMG,GAAN;AACD;AACF;AAED;;;;;;AAIA,eAAeD,IAAf,CAAoBD,GAApB,EAAyB;AACvB,MAAI;AACF,UAAMM,MAAM,MAAMC,QAAQP,GAAR,CAAlB;AACA,WAAOM,GAAP;AACD,GAHD,CAGE,OAAOJ,GAAP,EAAY;AACZ,QAAI,SAASC,IAAT,CAAcD,IAAIE,OAAlB,CAAJ,EAAgC;AAC9B,YAAMI,YAAY,mBAAQR,GAAR,CAAlB;AACA,YAAMC,KAAKO,SAAL,CAAN;AACA,YAAMC,OAAO,MAAMR,KAAKD,GAAL,CAAnB;AACA,aAAOS,IAAP;AACD;;AACD,UAAMP,GAAN;AACD;AACF;AAED;;;;;;;AAKA,eAAeK,OAAf,CAAuBP,GAAvB,EAA4B;AAC1B,QAAMM,MAAM,MAAM,0BAAYI,SAAZ,EAAmBV,GAAnB,EAAwBA,GAAxB,CAAlB;AACA,SAAOM,GAAP;AACD;AAED","sourcesContent":["import { mkdir } from 'fs'\nimport makePromise from 'makepromise'\nimport { dirname } from 'path'\n\n/**\n * Make sure that a file can be created by creating all directories to which it belongs, e.g., `ensurePath('/usr/local/test/wrote.data')` will attempt to create `/usr/local/test/` directory recursively starting from `usr`.\n * @param {string} path Path to the file\n * @returns {Promise.<string>} Same path as passed\n * @throws {Error} When the first folder in the path is non-executable\n */\nexport default async function ensurePath(path) {\n  const dir = dirname(path)\n  try {\n    await make(dir)\n    return path\n  } catch (err) {\n    if (/EEXIST/.test(err.message) && err.message.indexOf(dir) != -1) {\n      return path\n    }\n    throw err\n  }\n}\n\n/**\n * Recursive promise-based mkdir.\n * @param {string} dir Path to the directory to be created\n */\nasync function make(dir) {\n  try {\n    const res = await makeDir(dir)\n    return res\n  } catch (err) {\n    if (/ENOENT/.test(err.message)) {\n      const parentDir = dirname(dir)\n      await make(parentDir)\n      const res2 = await make(dir)\n      return res2\n    }\n    throw err\n  }\n}\n\n/**\n * Promisified fs.mkdir\n * @param {string} dir directory name\n * @returns {string} created directory name\n */\nasync function makeDir(dir) {\n  const res = await makePromise(mkdir, dir, dir)\n  return res\n}\n\n/**\n * @typedef {Object} Config\n * @property {string} type The type.\n */\n"],"file":"index.js"}